---
import AnimationLoader from '../components/AnimationLoader.astro';

export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/logodentalpro.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
      /* Asegúrate de que global.css se aplique. Astro lo maneja automáticamente si está en src/styles */
      @import '../styles/global.css';
    </style>
  </head>
  <body class="font-poppins bg-white text-gray-800">
    <slot />
    <script>
      // Declarar tipos globales
      declare global {
        interface Window {
          closeMobileMenu?: () => void;
          isMobileMenuOpen?: boolean;
          gsap?: any;
        }
      }

      // Script para manejar el menú móvil - se ejecutará después de que GSAP esté disponible
      document.addEventListener('DOMContentLoaded', () => {
        // Variable global para rastrear el estado del menú
        window.isMobileMenuOpen = false;
        
        // Función para inicializar el menú móvil
        function initMobileMenu() {
          const menuButton = document.getElementById('menu-button') as HTMLButtonElement | null;
          const mobileMenu = document.getElementById('mobile-menu') as HTMLDivElement | null;
          const menuItems = document.querySelectorAll('.mobile-menu-item') as NodeListOf<HTMLElement>;
          const hamburgerLines = document.querySelectorAll('.hamburger-line') as NodeListOf<HTMLElement>;
          
          if (!menuButton || !mobileMenu || typeof window.gsap === 'undefined') {
            // Si GSAP no está disponible aún, intentar de nuevo en 100ms
            setTimeout(initMobileMenu, 100);
            return;
          }
          
          // Configuración inicial del menú
          window.gsap.set(mobileMenu, {
            height: 0,
            opacity: 0,
            visibility: 'hidden'
          });
          
          window.gsap.set(menuItems, {
            y: -20,
            opacity: 0
          });
          
          // Función para abrir el menú
          function openMenu() {
            if (!menuButton || !mobileMenu) return;
            
            window.isMobileMenuOpen = true;
            mobileMenu.classList.remove('hidden');
            
            // Timeline para la animación de apertura
            const tl = window.gsap.timeline();
            
            // Animar el contenedor del menú
            tl.to(mobileMenu, {
              height: 'auto',
              opacity: 1,
              visibility: 'visible',
              duration: 0.3, // Reducido de 0.4 a 0.3
              ease: 'power2.out'
            })
            // Animar los elementos del menú con stagger
            .to(menuItems, {
              y: 0,
              opacity: 1,
              duration: 0.2, // Reducido de 0.3 a 0.2
              stagger: 0.05, // Reducido de 0.1 a 0.05
              ease: 'power2.out'
            }, '-=0.1'); // Reducido de -=0.2 a -=0.1
            
            // Animar el hamburger a X con valores mejorados
            if (hamburgerLines.length >= 3) {
              tl.to(hamburgerLines[0], {
                rotation: 45,
                y: 7,
                duration: 0.2, // Reducido de 0.3 a 0.2
                ease: 'power2.inOut'
              }, 0)
              .to(hamburgerLines[1], {
                opacity: 0,
                duration: 0.1, // Reducido de 0.2 a 0.1
                ease: 'power2.inOut'
              }, 0)
              .to(hamburgerLines[2], {
                rotation: -45,
                y: -7,
                duration: 0.2, // Reducido de 0.3 a 0.2
                ease: 'power2.inOut'
              }, 0);
            }
            
            // Actualizar atributos de accesibilidad
            menuButton.setAttribute('aria-expanded', 'true');
            mobileMenu.setAttribute('aria-hidden', 'false');
          }
          
          // Función para cerrar el menú
          function closeMenu() {
            if (!menuButton || !mobileMenu) return;
            
            window.isMobileMenuOpen = false;
            
            // Timeline para la animación de cierre
            const tl = window.gsap.timeline();
            
            // Animar los elementos del menú
            tl.to(menuItems, {
              y: -20,
              opacity: 0,
              duration: 0.15, // Reducido de 0.2 a 0.15
              stagger: 0.03, // Reducido de 0.05 a 0.03
              ease: 'power2.in'
            })
            // Animar el contenedor del menú
            .to(mobileMenu, {
              height: 0,
              opacity: 0,
              duration: 0.2, // Reducido de 0.3 a 0.2
              ease: 'power2.in'
            }, '-=0.1');
            
            // Restaurar el hamburger con valores mejorados
            if (hamburgerLines.length >= 3) {
              tl.to(hamburgerLines[0], {
                rotation: 0,
                y: 0,
                duration: 0.2, // Reducido de 0.3 a 0.2
                ease: 'power2.inOut'
              }, 0)
              .to(hamburgerLines[1], {
                opacity: 1,
                duration: 0.1, // Reducido de 0.2 a 0.1
                ease: 'power2.inOut'
              }, 0.05) // Reducido de 0.1 a 0.05
              .to(hamburgerLines[2], {
                rotation: 0,
                y: 0,
                duration: 0.2, // Reducido de 0.3 a 0.2
                ease: 'power2.inOut'
              }, 0);
            }
            
            // Ocultar el menú al final
            tl.set(mobileMenu, {
              visibility: 'hidden'
            })
            .call(() => {
              if (mobileMenu) {
                mobileMenu.classList.add('hidden');
              }
            });
            
            // Actualizar atributos de accesibilidad
            menuButton.setAttribute('aria-expanded', 'false');
            mobileMenu.setAttribute('aria-hidden', 'true');
            
            // Devolver una promesa que se resuelve cuando termina la animación
            return new Promise<void>((resolve) => {
              setTimeout(resolve, 250); // Tiempo reducido de 400ms a 250ms
            });
          }
          
          // Event listener para el botón del menú
          menuButton.addEventListener('click', () => {
            if (window.isMobileMenuOpen) {
              closeMenu();
            } else {
              openMenu();
            }
          });
          
          // Cerrar menú al hacer clic fuera de él
          document.addEventListener('click', (e: Event) => {
            const target = e.target as HTMLElement | null;
            if (target && window.isMobileMenuOpen && mobileMenu && menuButton && 
                !mobileMenu.contains(target) && !menuButton.contains(target)) {
              closeMenu();
            }
          });
          
          // Cerrar menú con tecla Escape
          document.addEventListener('keydown', (e: KeyboardEvent) => {
            if (e.key === 'Escape' && window.isMobileMenuOpen) {
              closeMenu();
            }
          });
          
          // Función global para cerrar el menú (para usar en enlaces)
          window.closeMobileMenu = closeMenu;
          
          console.log('Menú móvil inicializado con GSAP');
        }
        
        // Inicializar el menú móvil
        initMobileMenu();
        
        // Script para el desplazamiento suave y cerrar menú móvil
        document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
          anchor.addEventListener('click', async (e: Event) => {
            const targetId = anchor.getAttribute('href');
            if (targetId && targetId.startsWith('#') && targetId.length > 1) {
              e.preventDefault();
              const targetElement = document.querySelector(targetId) as HTMLElement | null;
              
              if (targetElement) {
                // Solo esperar si el menú móvil está abierto
                if (window.isMobileMenuOpen && window.closeMobileMenu) {
                  try {
                    // Cerrar el menú y esperar a que termine
                    await window.closeMobileMenu();
                  } catch (error) {
                    console.error('Error al cerrar el menú:', error);
                  }
                }
                
                // Hacer scroll inmediatamente (sin setTimeout adicional)
                targetElement.scrollIntoView({
                  behavior: 'smooth'
                });
              }
            }
          });
        });
      });
    </script>
    <AnimationLoader />
  </body>
</html>
