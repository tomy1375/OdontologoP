---
const testimonialImages = [
  {
    src: "/paciente.jpg",
    alt: "Paciente sonriendo feliz",
    username: "@lisamaria.99",
    position: "left"
  },
  {
    src: "/test1.jpg", 
    alt: "Otro paciente sonriendo",
    username: "@marcopolono",
    position: "right"
  },
  {
    src: "/test2.jpg",
    alt: "Paciente con sonrisa perfecta",
    username: "@carlosmed",
    position: "left"
  },
  {
    src: "/test3.jpg",
    alt: "Familia sonriendo después del tratamiento",
    username: "@familiahappy",
    position: "right"
  },
  {
    src: "/test4.jpg",
    alt: "Joven con brackets sonriendo",
    username: "@teenssmile",
    position: "left"
  }
];

const testimonialTexts = [
  {
    text: "¡El Dr. Giovanni es un genio! El tratamiento fue excelente y ahora mi sonrisa brilla. ¡Gracias!",
    author: "Ana María",
    delay: "0.4s"
  },
  {
    text: "Increíble experiencia en DentaPro. El equipo es muy profesional y los resultados superaron mis expectativas.",
    author: "Carlos Mendoza",
    delay: "0.5s"
  },
  {
    text: "Después de años de inseguridad, finalmente tengo la sonrisa que siempre quise. Totalmente recomendado.",
    author: "María Elena",
    delay: "0.6s"
  }
];
---

<section id="blog" class="bg-white py-16 md:py-24">
  <div class="container mx-auto px-4">
    <div class="max-w-3xl mx-auto text-center mb-16 animate-fadeIn">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-3">
        Sé parte de nuestra comunidad.
      </h2>
      <p class="text-2xl text-cyan-500 font-semibold">#SonrisaDentaPro</p>
    </div>
    
    <!-- Carrusel de imágenes con el mismo tamaño que el original -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8 items-start mb-16">
      <!-- Primera columna: Carrusel -->
      <div class="relative carousel-container overflow-hidden rounded-lg shadow-xl">
        <div id="carousel-track" class="flex transition-transform duration-500 ease-in-out" style="width: 500%;">
          {testimonialImages.map((image, index) => (
            <div class="carousel-slide flex-shrink-0 relative" style="width: 20%;">
              <img 
                src={image.src || "/placeholder.svg"}
                alt={image.alt}
                class="w-full h-auto object-cover rounded-lg shadow-xl aspect-square"
              />
              <div class={`absolute bottom-4 ${image.position === 'right' ? 'right-4' : 'left-4'} text-xs text-white bg-black bg-opacity-60 px-2 py-1 rounded-md`}>
                {image.username}
              </div>
            </div>
          ))}
        </div>
        
        <!-- Botones de navegación -->
        <button 
          id="prev-btn"
          class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white bg-opacity-80 hover:bg-opacity-100 text-gray-800 p-2 rounded-full shadow-lg transition-all duration-300 z-10"
          aria-label="Imagen anterior"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        
        <button 
          id="next-btn"
          class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white bg-opacity-80 hover:bg-opacity-100 text-gray-800 p-2 rounded-full shadow-lg transition-all duration-300 z-10"
          aria-label="Siguiente imagen"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>
      
      <!-- Segunda columna: Testimonios de texto -->
      <div class="space-y-6">
        {testimonialTexts.map((testimonial, index) => (
          <div class="bg-gray-50 p-6 md:p-8 rounded-lg shadow-lg animate-fadeIn relative" style={`animation-delay: ${testimonial.delay};`}>
            <svg class="w-10 h-10 md:w-12 md:h-12 text-cyan-400 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
            </svg>
            <blockquote class="italic text-lg md:text-xl text-gray-700 leading-relaxed text-center">
              "{testimonial.text}"
            </blockquote>
            <p class="mt-4 md:mt-6 text-gray-600 font-medium text-center">~ {testimonial.author}</p>
          </div>
        ))}
      </div>
    </div>
    
    <!-- Indicadores (dots) -->
    <div class="flex justify-center mb-16 space-x-2">
      {testimonialImages.map((_, index) => (
        <button 
          class={`carousel-dot w-3 h-3 rounded-full transition-all duration-300 ${index === 0 ? 'bg-cyan-500' : 'bg-gray-300'}`}
          data-slide={index}
          aria-label={`Ir a imagen ${index + 1}`}
        ></button>
      ))}
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const track = document.getElementById('carousel-track') as HTMLElement | null;
    const dots = document.querySelectorAll('.carousel-dot') as NodeListOf<HTMLElement>;
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    
    if (!track || !dots.length) return;
    
    let currentSlide = 0;
    const totalSlides = dots.length;
    let autoPlayInterval: number | undefined;
    let isTransitioning = false;
    
    // Función para ir a una diapositiva específica
    function goToSlide(slideIndex: number): void {
      if (isTransitioning) return;
      
      isTransitioning = true;
      currentSlide = slideIndex;
      const translateX = -slideIndex * 20; // 20% por cada slide
      
      if (track) {
        track.style.transform = `translateX(${translateX}%)`;
      }
      
      // Actualizar dots
      dots.forEach((dot, index) => {
        dot.classList.remove('bg-cyan-500', 'bg-gray-300');
        if (index === slideIndex) {
          dot.classList.add('bg-cyan-500');
        } else {
          dot.classList.add('bg-gray-300');
        }
      });
      
      // Permitir nuevas transiciones después de que termine la animación
      setTimeout(() => {
        isTransitioning = false;
      }, 500);
    }
    
    // Función para ir a la siguiente diapositiva
    function nextSlide(): void {
      if (isTransitioning) return;
      const next = (currentSlide + 1) % totalSlides;
      goToSlide(next);
    }
    
    // Función para ir a la diapositiva anterior
    function prevSlide(): void {
      if (isTransitioning) return;
      const prev = (currentSlide - 1 + totalSlides) % totalSlides;
      goToSlide(prev);
    }
    
    // Función para iniciar el autoplay
    function startAutoPlay(): void {
      // Limpiar cualquier intervalo existente
      if (autoPlayInterval !== undefined) {
        window.clearInterval(autoPlayInterval);
      }
      autoPlayInterval = window.setInterval(nextSlide, 3000); // 3 segundos
    }
    
    // Función para detener el autoplay
    function stopAutoPlay(): void {
      if (autoPlayInterval !== undefined) {
        window.clearInterval(autoPlayInterval);
        autoPlayInterval = undefined;
      }
    }
    
    // Event listeners para los dots
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        stopAutoPlay();
        goToSlide(index);
        // Reiniciar autoplay después de 1 segundo
        setTimeout(startAutoPlay, 1000);
      });
    });
    
    // Event listeners para los botones de navegación
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        stopAutoPlay();
        prevSlide();
        setTimeout(startAutoPlay, 1000);
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        stopAutoPlay();
        nextSlide();
        setTimeout(startAutoPlay, 1000);
      });
    }
    
    // Pausar autoplay cuando el mouse está sobre el carrusel
    const carouselContainer = document.querySelector('.carousel-container');
    if (carouselContainer) {
      carouselContainer.addEventListener('mouseenter', stopAutoPlay);
      carouselContainer.addEventListener('mouseleave', () => {
        // Esperar un poco antes de reiniciar para evitar conflictos
        setTimeout(startAutoPlay, 500);
      });
    }
    
    // Iniciar el autoplay
    startAutoPlay();
  });
</script>

<style>
  .carousel-container {
    position: relative;
  }
  
  #carousel-track {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }
  
  .carousel-slide {
    flex-shrink: 0;
  }
  
  /* Ocultar botones de navegación en móviles */
  @media (max-width: 768px) {
    #prev-btn,
    #next-btn {
      display: none;
    }
  }
  
  /* Efecto hover en los dots */
  .carousel-dot:hover {
    transform: scale(1.2);
  }
</style>
